name: CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm

      - run: npm ci
      - run: npm run build

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image (main only)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:${{ github.sha }}
            ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_API_KEY=${{ secrets.VITE_API_KEY }}

  scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Ensure artifacts dir
        run: mkdir -p artifacts

      - name: Trivy fs (vuln+secret)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scanners: 'vuln,secret'
          format: 'table'
          output: 'artifacts/trivy-fs.txt'
          severity: 'MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Trivy fs JSON
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scanners: 'vuln,secret'
          format: 'json'
          output: 'artifacts/trivy-fs.json'
          severity: 'MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Trivy secrets (table)
        run: trivy fs . --scanners secret --no-progress -f table -o artifacts/trivy-secrets.txt || true

      - name: Trivy Image (table)
        run: |
          if ! docker pull ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest; then
            echo "Image not found in registry, building locally..."
            docker build -t ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest .
          fi
          trivy image ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest --severity MEDIUM,HIGH,CRITICAL --ignore-unfixed -f table -o artifacts/trivy-image.txt || true

      - name: Trivy Image (json)
        run: |
          trivy image ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest -f json -o artifacts/trivy-image.json || echo '{}' > artifacts/trivy-image.json

      - name: EPV metrics
        run: |
          jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length' artifacts/trivy-image.json > artifacts/epv.txt || echo 0 > artifacts/epv.txt
          jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM" or .Severity=="HIGH" or .Severity=="CRITICAL")] | length' artifacts/trivy-image.json > artifacts/epv-total.txt || echo 0 > artifacts/epv-total.txt
          if [ ! -f artifacts/epv.csv ]; then echo 'date,commit,epv_high,epv_total' > artifacts/epv.csv; fi
          printf '%s,%s,%s,%s\n' "$(date +%F)" "${GITHUB_SHA::7}" "$(< artifacts/epv.txt)" "$(< artifacts/epv-total.txt)" >> artifacts/epv.csv

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan
          path: artifacts/*

  dast:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Ensure image for DAST
        run: |
          if ! docker pull ghcr.io/${{ secrets.DOCKER_REPO_OWNER }}/lumm-web:latest; then
            echo "Image not found or unauthorized. Building locally..."
            docker build -t ghcr.io/${{ secrets.DOCKER_REPO_OWNER }}/lumm-web:latest .
          fi

      - name: Start test web (published to 8080)
        run: |
          docker run -d --name lumm-web -p 8080:80 ghcr.io/${{ secrets.DOCKER_REPO_OWNER }}/lumm-web:latest
          for i in {1..30}; do
            if curl -fsS http://localhost:8080 >/dev/null; then echo "App is up"; break; fi
            sleep 2
          done

      - name: OWASP ZAP Baseline
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8080'
          cmd_options: '-I'
          allow_issue_writing: false
        continue-on-error: true

      - name: Collect ZAP reports
        run: |
          mkdir -p artifacts
          mv zap_report.html artifacts/zap-baseline.html || true
          mv zap_report.md artifacts/zap-baseline.md || true

      - name: Upload DAST artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dast-zap-report
          path: artifacts/*
