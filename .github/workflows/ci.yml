name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm

      - run: npm ci
      - run: npm run build

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image (main only)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:${{ github.sha }}
            ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_API_KEY=${{ secrets.VITE_API_KEY }}
            VITE_ROBOTS=${{ secrets.VITE_ROBOTS }}
            VITE_SITE_URL=${{ secrets.VITE_SITE_URL }}

  scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Ensure artifacts dir
        run: mkdir -p artifacts

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Trivy CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Trivy fs
        run: |
          mkdir -p artifacts
          trivy fs . \
            --scanners vuln,secret \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            --ignore-unfixed \
            -f table -o artifacts/trivy-fs.txt || true

          trivy fs . \
            --scanners vuln,secret \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            --ignore-unfixed \
            -f json -o artifacts/trivy-fs.json || echo '{}' > artifacts/trivy-fs.json

      - name: Trivy image
        run: |
          if ! docker pull ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest; then
            docker build -t ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest .
          fi

          # Table format
          trivy image ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            --ignore-unfixed \
            -f table -o artifacts/trivy-image.txt || true

          # JSON format
          trivy image ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            --ignore-unfixed \
            -f json -o artifacts/trivy-image.json || echo '{}' > artifacts/trivy-image.json

      - name: Trivy config
        run: |
          mkdir -p artifacts
          trivy config . \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            -f table -o artifacts/trivy-config.txt || true

          trivy config . \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            -f json -o artifacts/trivy-config.json || echo '{}' > artifacts/trivy-config.json

      - name: Calculate EPV
        run: |
          mkdir -p artifacts

          C=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' artifacts/trivy-image.json)
          H=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' artifacts/trivy-image.json)
          M=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' artifacts/trivy-image.json)
          L=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' artifacts/trivy-image.json)

          echo "Detected failures - CRITICAL: $C, HIGH: $H, MEDIUM: $M, LOW: $L"

          EPV=$(echo "scale=2; (1.0*$C) + (0.75*$H) + (0.5*$M) + (0.25*$L)" | bc)
          echo "Calculated EPV: $EPV"
          echo "$EPV" > artifacts/epv.txt

          if [ ! -f artifacts/epv.csv ]; then
            echo 'date,commit,epv' > artifacts/epv.csv
          fi

          printf '%s,%s,%s\n' "$(date +%F)" "${GITHUB_SHA::7}" "$EPV" >> artifacts/epv.csv

      - name: Generate EPV graph
        run: |
          pip install matplotlib pandas seaborn
          python3 scripts/plot_epv.py

      - name: Check EPV threshold
        run: |
          EPV=$(< artifacts/epv.txt)
          echo "🔎 EPV detected: $EPV (threshold: $EPV_THRESHOLD)"
          RESULT=$(echo "$EPV >= $EPV_THRESHOLD" | bc)

          C=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' artifacts/trivy-image.json)
          H=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' artifacts/trivy-image.json)
          M=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' artifacts/trivy-image.json)
          L=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' artifacts/trivy-image.json)

          echo "### 🔐 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severity  | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🟥 CRITICAL |   $C   |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟧 HIGH     |   $H   |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟨 MEDIUM   |   $M   |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟦 LOW      |   $L   |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **EPV**: \`$EPV\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Threshold**: \`$EPV_THRESHOLD\`" >> $GITHUB_STEP_SUMMARY

          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            echo "- ℹ️ This is a Pull Request — image was built but not pushed." >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$RESULT" -eq 1 ]; then
            echo "- ❌ **Merge blocked**: EPV >= threshold" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "- ✅ **Merge approved**: EPV below threshold" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          EPV_THRESHOLD: ${{ vars.EPV_THRESHOLD || 5 }}

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: web-security-scan
          path: artifacts/*

      - name: Clean workspace
        if: always()
        run: |
          echo "Cleaning up..."
          docker container prune -f
          docker volume prune -f
          rm -rf artifacts/

  dast:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure image for DAST
        run: |
          if ! docker pull ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest; then
            echo "Image not found or unauthorized. Building locally..."
            docker build -t ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest .
          fi

      - name: Start test web (published to 8080)
        run: |
          docker run -d --name lumm-web -p 8080:80 ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:latest
          for i in {1..30}; do
            if curl -fsS http://localhost:8080 >/dev/null; then echo "App is up"; break; fi
            sleep 2
          done

      - name: Set permissions for ZAP workspace
        run: |
          chmod -R 777 ${{ github.workspace }}

      - name: OWASP ZAP Baseline
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "http://localhost:8080"
          cmd_options: "-I"
          allow_issue_writing: false
          artifact_name: "dast"
        continue-on-error: true

      - name: Collect DAST reports
        run: |
          mkdir -p artifacts
          mv zap_report.html artifacts/dast-baseline.html || true
          mv zap_report.md artifacts/dast-baseline.md || true

      - name: Upload DAST artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-dast
          path: artifacts/*
