name: CI

on:
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image only (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:ci
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_API_KEY=${{ secrets.VITE_API_KEY }}
            VITE_ROBOTS=${{ secrets.VITE_ROBOTS }}
            VITE_SITE_URL=${{ secrets.VITE_SITE_URL }}

  scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Ensure dir
        run: mkdir -p artifacts

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Trivy CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Trivy fs
        run: |
          mkdir -p artifacts
          trivy fs . \
            --scanners vuln,secret \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            --ignore-unfixed \
            -f table -o artifacts/trivy-fs.txt || true

          trivy fs . \
            --scanners vuln,secret \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            --ignore-unfixed \
            -f json -o artifacts/trivy-fs.json || echo '{}' > artifacts/trivy-fs.json

      - name: Trivy image
        run: |
          trivy image ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:ci \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            --ignore-unfixed \
            -f table -o artifacts/trivy-image.txt || true

          trivy image ghcr.io/${{ secrets.REPOSITORY_OWNER }}/lumm-web:ci \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            --ignore-unfixed \
            -f json -o artifacts/trivy-image.json || echo '{}' > artifacts/trivy-image.json

      - name: Trivy config
        run: |
          mkdir -p artifacts
          trivy config . \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            -f table -o artifacts/trivy-config.txt || true

          trivy config . \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            -f json -o artifacts/trivy-config.json || echo '{}' > artifacts/trivy-config.json

      - name: Calculate EPV
        run: |
          mkdir -p artifacts

          Ci=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' artifacts/trivy-image.json)
          Hi=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' artifacts/trivy-image.json)
          Mi=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' artifacts/trivy-image.json)
          Li=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' artifacts/trivy-image.json)

          Cf=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' artifacts/trivy-fs.json)
          Hf=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' artifacts/trivy-fs.json)
          Mf=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' artifacts/trivy-fs.json)
          Lf=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' artifacts/trivy-fs.json)

          Cc=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' artifacts/trivy-config.json)
          Hc=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' artifacts/trivy-config.json)
          Mc=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' artifacts/trivy-config.json)
          Lc=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' artifacts/trivy-config.json)

          C=$((Ci + Cf + Cc))
          H=$((Hi + Hf + Hc))
          M=$((Mi + Mf + Mc))
          L=$((Li + Lf + Lc))

          echo "Detected failures - CRITICAL: $C, HIGH: $H, MEDIUM: $M, LOW: $L"

          EPV=$(echo "scale=2; (1.0*$C) + (0.75*$H) + (0.5*$M) + (0.25*$L)" | bc)
          echo "Calculated EPV: $EPV"
          echo "$EPV" > artifacts/epv.txt

          if [ ! -f artifacts/epv.csv ]; then
            echo 'date,commit,epv' > artifacts/epv.csv
          fi

          printf '%s,%s,%s\n' "$(date +%F)" "${GITHUB_SHA::7}" "$EPV" >> artifacts/epv.csv

      - name: Generate EPV graph
        run: |
          pip install matplotlib pandas seaborn
          python3 scripts/plot_epv.py

      - name: Check EPV threshold
        run: |
          EPV=$(< artifacts/epv.txt)
          echo "🔎 EPV detected: $EPV (threshold: $EPV_THRESHOLD)"
          RESULT=$(echo "$EPV >= $EPV_THRESHOLD" | bc)

          Ci=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' artifacts/trivy-image.json)
          Hi=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' artifacts/trivy-image.json)
          Mi=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' artifacts/trivy-image.json)
          Li=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' artifacts/trivy-image.json)

          Cf=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' artifacts/trivy-fs.json)
          Hf=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' artifacts/trivy-fs.json)
          Mf=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' artifacts/trivy-fs.json)
          Lf=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' artifacts/trivy-fs.json)

          Cc=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' artifacts/trivy-config.json)
          Hc=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' artifacts/trivy-config.json)
          Mc=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' artifacts/trivy-config.json)
          Lc=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length' artifacts/trivy-config.json)

          C=$((Ci + Cf + Cc))
          H=$((Hi + Hf + Hc))
          M=$((Mi + Mf + Mc))
          L=$((Li + Lf + Lc))

          echo "### 🔐 Resumo da verificação de segurança" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severidade | Contagem |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🟥 CRÍTICA  |   $C   |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟧 ALTA     |   $H   |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟨 MÉDIA    |   $M   |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟦 BAIXA    |   $L   |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **EPV**: \`$EPV\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Threshold**: \`$EPV_THRESHOLD\`" >> $GITHUB_STEP_SUMMARY

          if [ "$RESULT" -eq 1 ]; then
            echo "- ❌ **Reprovado**: EPV >= threshold" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "- ✅ **Aprovado**: EPV abaixo do threshold" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            echo "- ℹ️ Esta é uma solicitação de pull — a imagem foi criada, mas não enviada." >> $GITHUB_STEP_SUMMARY
          fi
        env:
          EPV_THRESHOLD: ${{ vars.EPV_THRESHOLD || 5 }}

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: web-security-scan
          path: artifacts/*

      - name: Clean workspace
        if: always()
        run: |
          echo "Cleaning up..."
          docker container prune -f
          docker volume prune -f
          rm -rf artifacts/
